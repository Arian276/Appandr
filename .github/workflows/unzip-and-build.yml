name: Build and Analyze Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Unzip q.zip (auto-detect root)
        shell: bash
        run: |
          set -euo pipefail
          test -f q.zip || { echo "❌ No está q.zip en la raíz"; exit 1; }
          unzip -o q.zip -d extracted
          CANDIDATE=$(find extracted -maxdepth 3 -type f \( -name "settings.gradle" -o -name "gradlew" \) -printf '%h\n' | head -n1 || true)
          [ -z "$CANDIDATE" ] && echo "❌ No se detectó proyecto válido" && exit 1
          rsync -a "$CANDIDATE"/ .
          rm -rf extracted q.zip

      - name: Validar estructura
        run: |
          test -f gradlew || exit 1
          test -f gradle/wrapper/gradle-wrapper.jar || exit 1
          chmod +x gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Export Android SDK paths (GitHub workaround)
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME"
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV

      - name: Build Debug APK
        run: ./gradlew assembleDebug --stacktrace

      - name: Build Release APK
        run: ./gradlew assembleRelease --stacktrace

      - name: Detectar APK generado
        run: |
          APK_PATH=$(find . -type f -name "*.apk" | head -n1)
          [ -z "$APK_PATH" ] && echo "❌ No se encontró APK" && exit 1
          echo "✅ APK: $APK_PATH"
          echo "apk-path=$APK_PATH" >> $GITHUB_ENV

      - name: Decode APK con apktool
        run: |
          mkdir -p tools/apktool
          curl -sLo tools/apktool/apktool.jar https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool_2.6.1.jar
          java -jar tools/apktool/apktool.jar d "${{ env.apk-path }}" -o decoded_apk

      - name: Detectar guardrails en APK
        run: |
          mkdir -p tools
          curl -sLo tools/guardrails.jar https://example.com/guardrails.jar # Reemplazá con tu fuente real
          java -jar tools/guardrails.jar decoded_apk | head -n11 || echo "⚠️ Guardrails no detectados"

      - name: Instalar apkx
        run: pip install apkx

      - name: Run APKX STATIC ANALYSIS
        run: python3 tools/apkx_static_analysis/run_apkx_static_analysis.py

      - name: Subir APK a transfer.sh
        run: |
          APK_NAME=$(ls -t "${{ env.apk-path }}" | head -n1)
          echo "📤 Subiendo APK: $APK_NAME"
          curl --upload-file "$APK_NAME" https://transfer.sh/$(basename "$APK_NAME") > transfer_url.txt
          echo "🔗 URL de descarga:"
          cat transfer_url.txt

      - name: Subir artefactos locales
        uses: actions/upload-artifact@v4
        with:
          name: decoded-apk
          path: decoded_apk/
