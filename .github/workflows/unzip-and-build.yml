name: Build Android APK

on:
  push:
    branches: [ main ]
    paths:
      - '**.kt'
      - '**.xml'
      - '**.gradle*'
      - '**/AndroidManifest.xml'
      - '.github/workflows/**'
      - 'q.zip'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verificar ubicación de q.zip
        run: |
          echo "📦 Archivos en la raíz:"
          ls -la

      - name: Unzip q.zip (auto-detect root)
        shell: bash
        run: |
          set -euo pipefail

          test -f q.zip || { echo "❌ No está q.zip en la raíz"; exit 1; }
          rm -rf extracted
          unzip -o q.zip -d extracted
          echo "📁 Después de unzip:"
          (cd extracted && tree -L 3 || true)

          # 1) Si el ZIP trae una sola carpeta raíz, usarla como base
          ROOT_DIR=$(find extracted -mindepth 1 -maxdepth 1 -type d | head -n1 || true)
          [ -z "${ROOT_DIR:-}" ] && ROOT_DIR="extracted"

          # 2) Detectar la carpeta de proyecto (donde están settings.gradle(.kts) o gradlew)
          CANDIDATE=$(find "$ROOT_DIR" -maxdepth 3 -type f \( -name "settings.gradle" -o -name "settings.gradle.kts" -o -name "gradlew" \) -printf '%h\n' | head -n1 || true)
          if [ -z "${CANDIDATE:-}" ]; then
            echo "❌ No encontré settings.gradle(.kts) ni gradlew dentro del ZIP."
            exit 1
          fi
          echo "↪️ Proyecto detectado en: $CANDIDATE"

          shopt -s dotglob
          rsync -a "$CANDIDATE"/ .
          rm -rf extracted q.zip

          echo "📦 Raíz tras mover:"
          ls -la
          echo "📦 gradle/wrapper:"
          ls -la gradle/wrapper || true

      - name: Validar estructura del proyecto
        run: |
          test -f settings.gradle.kts || test -f settings.gradle || { echo "❌ Falta settings.gradle"; exit 1; }
          test -f gradlew || { echo "❌ Falta gradlew"; exit 1; }
          test -f gradle/wrapper/gradle-wrapper.jar || { echo "❌ Falta gradle-wrapper.jar"; exit 1; }
          test -f gradle/wrapper/gradle-wrapper.properties || { echo "❌ Falta gradle-wrapper.properties"; exit 1; }
          chmod +x gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses & install Android SDK 34
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Build APK (verbose)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon --warning-mode all --info --stacktrace assembleDebug | tee build.log

      - name: Mostrar causa del error
        if: failure()
        shell: bash
        run: |
          echo "---- WHAT WENT WRONG (resumen) ----"
            tail -n 200 build.log
      - name: "Diagnóstico: badging del APK"
        if: success()
        run: |
          echo "📦 Buscando badging del APK"
          find . -type f -name "*.apk" -exec aapt dump badging {} \; || echo "❌ No se pudo extraer badging"

      - name: Detectar y guardar ruta del APK
        if: success()
        id: find_apk
        run: |
          echo "📦 Detectando APK generado..."
          APK_PATH=$(find . -type f -name "*.apk" | head -n1)
          if [ -z "$APK_PATH" ]; then
            echo "❌ No se encontró ningún APK"
            exit 1
          fi
          echo "✅ APK encontrado en: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> "$GITHUB_ENV"

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APK_PATH }}
          if-no-files-found: error
